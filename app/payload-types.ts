/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    homepage: Homepage
    'exhibitions-page': ExhibitionsPage
    'artists-page': ArtistsPage
    'gallery-page': GalleryPage
    'art-society-page': ArtSocietyPage
    'members-only-page': MembersOnlyPage
    'generic-pages': GenericPage
    'newsletter-page': NewsletterPage
    artist: Artist
    artwork: Artwork
    exhibition: Exhibition
    testimonial: Testimonial
    media: Media
    'form-submission': FormSubmission
    users: User
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  globals: {
    menu: Menu
    footer: Footer
    socials: Social
    'reach-out': ReachOut
    'newsletter-banner': NewsletterBanner
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: string
  featuredExhibitions: (string | Exhibition)[]
  layout: (
    | TwoColumnBlock
    | CallToAction
    | {
        content: {
          [k: string]: unknown
        }[]
        id?: string | null
        blockName?: string | null
        blockType: 'content'
      }
  )[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibition".
 */
export interface Exhibition {
  id: string
  title: string
  text: {
    [k: string]: unknown
  }[]
  homepageImage?: string | Media | null
  image: string | Media
  dateBegin?: string | null
  dateEnd?: string | null
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  relation?: {
    artists?: (string | null) | Artist
  }
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string
  title: string
  cloudinary?: {
    public_id?: string | null
    original_filename?: string | null
    format?: string | null
    secure_url?: string | null
    resource_type?: string | null
  }
  updatedAt: string
  createdAt: string
  url?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artist".
 */
export interface Artist {
  id: string
  name: string
  country: string
  additional_info: string
  image: string | Media
  type: 'represented' | 'featured'
  bio: {
    [k: string]: unknown
  }[]
  artworkArchiveCode?: string | null
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  relation: {
    artworks: string | Artwork
  }
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artwork".
 */
export interface Artwork {
  id: string
  title: string
  description: string
  image: string | Media
  relation: {
    artist: string | Artist
  }
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoColumnBlock".
 */
export interface TwoColumnBlock {
  invertOrder?: boolean | null
  columnText: {
    size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null
    title?: string | null
    subtitle: string
    content?:
      | {
          [k: string]: unknown
        }[]
      | null
    addLink?: boolean | null
    link?: {
      type?: ('reference' | 'custom' | 'mailto') | null
      newTab?: boolean | null
      reference?:
        | ({
            relationTo: 'homepage'
            value: string | Homepage
          } | null)
        | ({
            relationTo: 'artists-page'
            value: string | ArtistsPage
          } | null)
        | ({
            relationTo: 'art-society-page'
            value: string | ArtSocietyPage
          } | null)
        | ({
            relationTo: 'exhibitions-page'
            value: string | ExhibitionsPage
          } | null)
        | ({
            relationTo: 'gallery-page'
            value: string | GalleryPage
          } | null)
        | ({
            relationTo: 'members-only-page'
            value: string | MembersOnlyPage
          } | null)
        | ({
            relationTo: 'generic-pages'
            value: string | GenericPage
          } | null)
        | ({
            relationTo: 'newsletter-page'
            value: string | NewsletterPage
          } | null)
      url?: string | null
      email?: string | null
      subject?: string | null
      body?: string | null
      label: string
      appearance?: ('default' | 'primary' | 'secondary') | null
    }
  }
  columnImage: {
    size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null
    image: string | Media
  }
  id?: string | null
  blockName?: string | null
  blockType: 'two-column-block'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artists-page".
 */
export interface ArtistsPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  featuredArtwork: string | Artwork
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "art-society-page".
 */
export interface ArtSocietyPage {
  id: string
  call_to_action_text: string
  imageHero: string | Media
  help_text_: {
    [k: string]: unknown
  }[]
  benefits: {
    [k: string]: unknown
  }[]
  benefitsVideo: string | Media
  title_sentence: string
  testimonialsItems?: (string | Testimonial)[] | null
  resetPasswordImage: string | Media
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonial".
 */
export interface Testimonial {
  id: string
  name: string
  testimonial: string
  picture?: string | Media | null
  stars?: number | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibitions-page".
 */
export interface ExhibitionsPage {
  id: string
  featuredExhibitions: (string | Exhibition)[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-page".
 */
export interface GalleryPage {
  id: string
  about_text: {
    [k: string]: unknown
  }[]
  mission_statement: {
    [k: string]: unknown
  }[]
  imageHero: string | Media
  alexander_bio: {
    [k: string]: unknown
  }[]
  imageAlexander: string | Media
  felicitas_bio: {
    [k: string]: unknown
  }[]
  imageFelicitas: string | Media
  main_text: {
    [k: string]: unknown
  }[]
  textImageBlock: {
    imageVision: string | Media
    text_under_image: {
      [k: string]: unknown
    }[]
  }
  text: {
    [k: string]: unknown
  }[]
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  backgroundImage: string | Media
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members-only-page".
 */
export interface MembersOnlyPage {
  id: string
  tab_title_home: string
  page_title_home: string
  text_home: {
    [k: string]: unknown
  }[]
  homeBlocks: TitleImageInfoBlock[]
  tab_title_virtual_exhibition: string
  page_title_virtual_exhibition: string
  virtualExhibition?: string | null
  tab_title_special_events: string
  page_title_special_events: string
  text_special_events: {
    [k: string]: unknown
  }[]
  specialEventsImage: string | Media
  tab_title_art_advice: string
  page_title_art_advice: string
  individuallArtAdviceBlock: TitleImageInfoBlock[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TitleImageInfoBlock".
 */
export interface TitleImageInfoBlock {
  textJustification?: ('left' | 'center' | 'right' | 'justify') | null
  title?: string | null
  info: {
    [k: string]: unknown
  }[]
  addLink?: boolean | null
  link?: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  image: string | Media
  id?: string | null
  blockName?: string | null
  blockType: 'title-image-info-block'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-pages".
 */
export interface GenericPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-page".
 */
export interface NewsletterPage {
  id: string
  newsletter?: string | null
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToAction".
 */
export interface CallToAction {
  backgroundColor: 'white' | 'black' | 'blue'
  title: string
  text: {
    [k: string]: unknown
  }[]
  featuredImage: string | Media
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
  }
  id?: string | null
  blockName?: string | null
  blockType: 'cta'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submission".
 */
export interface FormSubmission {
  id: string
  name: string
  email: string
  message: string
  source?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  firstName?: string | null
  lastName?: string | null
  roles?: ('admin' | 'user')[] | null
  updatedAt: string
  createdAt: string
  email: string
  resetPasswordToken?: string | null
  resetPasswordExpiration?: string | null
  salt?: string | null
  hash?: string | null
  loginAttempts?: number | null
  lockUntil?: string | null
  password: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: string
  nav?:
    | {
        link: {
          type?: ('reference' | 'custom' | 'mailto') | null
          newTab?: boolean | null
          reference?:
            | ({
                relationTo: 'homepage'
                value: string | Homepage
              } | null)
            | ({
                relationTo: 'artists-page'
                value: string | ArtistsPage
              } | null)
            | ({
                relationTo: 'art-society-page'
                value: string | ArtSocietyPage
              } | null)
            | ({
                relationTo: 'exhibitions-page'
                value: string | ExhibitionsPage
              } | null)
            | ({
                relationTo: 'gallery-page'
                value: string | GalleryPage
              } | null)
            | ({
                relationTo: 'members-only-page'
                value: string | MembersOnlyPage
              } | null)
            | ({
                relationTo: 'generic-pages'
                value: string | GenericPage
              } | null)
            | ({
                relationTo: 'newsletter-page'
                value: string | NewsletterPage
              } | null)
          url?: string | null
          email?: string | null
          subject?: string | null
          body?: string | null
          label: string
          appearance?: ('default' | 'primary' | 'secondary') | null
        }
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string
  call_to_action: {
    [k: string]: unknown
  }[]
  nav?:
    | {
        category: string
        navItem?:
          | {
              link: {
                type?: ('reference' | 'custom' | 'mailto') | null
                newTab?: boolean | null
                reference?:
                  | ({
                      relationTo: 'homepage'
                      value: string | Homepage
                    } | null)
                  | ({
                      relationTo: 'artists-page'
                      value: string | ArtistsPage
                    } | null)
                  | ({
                      relationTo: 'art-society-page'
                      value: string | ArtSocietyPage
                    } | null)
                  | ({
                      relationTo: 'exhibitions-page'
                      value: string | ExhibitionsPage
                    } | null)
                  | ({
                      relationTo: 'gallery-page'
                      value: string | GalleryPage
                    } | null)
                  | ({
                      relationTo: 'members-only-page'
                      value: string | MembersOnlyPage
                    } | null)
                  | ({
                      relationTo: 'generic-pages'
                      value: string | GenericPage
                    } | null)
                  | ({
                      relationTo: 'newsletter-page'
                      value: string | NewsletterPage
                    } | null)
                url?: string | null
                email?: string | null
                subject?: string | null
                body?: string | null
                label: string
                appearance?: ('default' | 'primary' | 'secondary') | null
              }
              id?: string | null
            }[]
          | null
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socials".
 */
export interface Social {
  id: string
  socials?:
    | {
        platform: string
        url: string
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reach-out".
 */
export interface ReachOut {
  id: string
  title: string
  text: {
    [k: string]: unknown
  }[]
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-banner".
 */
export interface NewsletterBanner {
  id: string
  title: string
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  updatedAt?: string | null
  createdAt?: string | null
}

// declare module 'payload' {
//   export interface GeneratedTypes extends Config {}
// }
