/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji'

export interface Config {
  auth: {
    users: UserAuthOperations
  }
  blocks: {}
  collections: {
    homepage: Homepage
    'exhibitions-page': ExhibitionsPage
    'artists-page': ArtistsPage
    'gallery-page': GalleryPage
    'art-society-page': ArtSocietyPage
    'members-only-page': MembersOnlyPage
    'newsletter-page': NewsletterPage
    'blog-page': BlogPage
    'generic-pages': GenericPage
    artist: Artist
    artwork: Artwork
    blogpost: Blogpost
    exhibition: Exhibition
    testimonial: Testimonial
    media: Media
    'form-submission': FormSubmission
    users: User
    'payload-locked-documents': PayloadLockedDocument
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  collectionsJoins: {}
  collectionsSelect: {
    homepage: HomepageSelect<false> | HomepageSelect<true>
    'exhibitions-page': ExhibitionsPageSelect<false> | ExhibitionsPageSelect<true>
    'artists-page': ArtistsPageSelect<false> | ArtistsPageSelect<true>
    'gallery-page': GalleryPageSelect<false> | GalleryPageSelect<true>
    'art-society-page': ArtSocietyPageSelect<false> | ArtSocietyPageSelect<true>
    'members-only-page': MembersOnlyPageSelect<false> | MembersOnlyPageSelect<true>
    'newsletter-page': NewsletterPageSelect<false> | NewsletterPageSelect<true>
    'blog-page': BlogPageSelect<false> | BlogPageSelect<true>
    'generic-pages': GenericPagesSelect<false> | GenericPagesSelect<true>
    artist: ArtistSelect<false> | ArtistSelect<true>
    artwork: ArtworkSelect<false> | ArtworkSelect<true>
    blogpost: BlogpostSelect<false> | BlogpostSelect<true>
    exhibition: ExhibitionSelect<false> | ExhibitionSelect<true>
    testimonial: TestimonialSelect<false> | TestimonialSelect<true>
    media: MediaSelect<false> | MediaSelect<true>
    'form-submission': FormSubmissionSelect<false> | FormSubmissionSelect<true>
    users: UsersSelect<false> | UsersSelect<true>
    'payload-locked-documents':
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>
  }
  db: {
    defaultIDType: string
  }
  globals: {
    menu: Menu
    footer: Footer
    socials: Social
    'reach-out': ReachOut
    'newsletter-banner': NewsletterBanner
    'newsletter-popup': NewsletterPopup
  }
  globalsSelect: {
    menu: MenuSelect<false> | MenuSelect<true>
    footer: FooterSelect<false> | FooterSelect<true>
    socials: SocialsSelect<false> | SocialsSelect<true>
    'reach-out': ReachOutSelect<false> | ReachOutSelect<true>
    'newsletter-banner': NewsletterBannerSelect<false> | NewsletterBannerSelect<true>
    'newsletter-popup': NewsletterPopupSelect<false> | NewsletterPopupSelect<true>
  }
  locale: 'en' | 'de'
  user: User & {
    collection: 'users'
  }
  jobs: {
    tasks: unknown
    workflows: unknown
  }
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string
    password: string
  }
  login: {
    email: string
    password: string
  }
  registerFirstUser: {
    email: string
    password: string
  }
  unlock: {
    email: string
    password: string
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: string
  featuredExhibitions: (string | Exhibition)[]
  layout: (TextBlock | TwoColumnBlock | CallToAction | VideoBlock)[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibition".
 */
export interface Exhibition {
  id: string
  title: string
  dateBegin?: string | null
  dateEnd?: string | null
  text: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 16/9
   */
  homepageImage?: Media
  /**
   * Optimal aspect-ratio: N/A
   */
  image: Media
  addLink?: boolean | null
  exhibitionLink?: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  addOtherLink?: boolean | null
  extraLink?: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  relation?: {
    artists?: (string | Artist)[] | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string
  title: string
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artists-page".
 */
export interface ArtistsPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  /**
   * Shown when no artist name is hovered in the list
   */
  featuredArtwork: string | Artwork
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artwork".
 */
export interface Artwork {
  id: string
  title: string
  description: string
  /**
   * Optimal aspect-ratio: N/A
   */
  image: Media
  relation: {
    artist: string | Artist
  }
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artist".
 */
export interface Artist {
  id: string
  full_name: string
  country: string
  additional_info: string
  website?: string | null
  instagram?: string | null
  /**
   * Optimal aspect-ratio: 1/1 for avatar (other aspect ratios can also work as long as the person is centered)
   */
  image: Media
  type: 'represented' | 'featured'
  bio: {
    [k: string]: unknown
  }[]
  artworkArchiveCode?: string | null
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  relation: {
    artworks: string | Artwork
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "art-society-page".
 */
export interface ArtSocietyPage {
  id: string
  call_to_action_text: string
  /**
   * Optimal aspect-ratio: 1/1
   */
  imageHero: Media
  help_text_: {
    [k: string]: unknown
  }[]
  benefits: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 16/9
   */
  benefitsVideo: Media
  title_sentence: string
  testimonialsItems?: (string | Testimonial)[] | null
  /**
   * Optimal aspect-ratio: 1/1
   */
  resetPasswordImage: Media
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonial".
 */
export interface Testimonial {
  id: string
  name: string
  testimonial: string
  /**
   * Optimal aspect-ratio: 1:1
   */
  picture?: Media
  stars?: number | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibitions-page".
 */
export interface ExhibitionsPage {
  id: string
  featuredExhibitions: (string | Exhibition)[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-page".
 */
export interface GalleryPage {
  id: string
  about_text: {
    [k: string]: unknown
  }[]
  mission_statement: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 1/1
   */
  imageHero: Media
  alexander_bio: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 1/1
   */
  imageAlexander: Media
  felicitas_bio: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 1/1
   */
  imageFelicitas: Media
  main_text: {
    [k: string]: unknown
  }[]
  textImageBlock: {
    /**
     * Optimal aspect-ratio: 4/3
     */
    imageVision: Media
    text_under_image: {
      [k: string]: unknown
    }[]
  }
  text: {
    [k: string]: unknown
  }[]
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  /**
   * Optimal aspect-ratio:  N/A
   */
  backgroundImage: Media
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members-only-page".
 */
export interface MembersOnlyPage {
  id: string
  tab_title_home: string
  page_title_home: string
  text_home: {
    [k: string]: unknown
  }[]
  homeBlocks: TitleImageInfoBlock[]
  tab_title_virtual_exhibition: string
  page_title_virtual_exhibition: string
  /**
   * Paste the iframe code here. It should start be formatted similar to <iframe allowfullscreen="true" frameborder="0" scrolling="no" src="https://art.kunstmatrix.com/apps/artspaces/?external=true&uid=103202&exhibition=13090739" width="100%" height="600"></iframe>
   */
  virtualExhibition?: string | null
  tab_title_special_events: string
  page_title_special_events: string
  text_special_events: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: N/A
   */
  specialEventsImage: Media
  tab_title_art_advice: string
  page_title_art_advice: string
  individuallArtAdviceBlock: TitleImageInfoBlock[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TitleImageInfoBlock".
 */
export interface TitleImageInfoBlock {
  textJustification?: ('left' | 'center' | 'right' | 'justify') | null
  title?: string | null
  info: {
    [k: string]: unknown
  }[]
  addLink?: boolean | null
  link?: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  /**
   * Optimal aspect-ratio: 16/9
   */
  image: Media
  id?: string | null
  blockName?: string | null
  blockType: 'title-image-info-block'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-pages".
 */
export interface GenericPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-page".
 */
export interface NewsletterPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  success_message: {
    [k: string]: unknown
  }[]
  /**
   * Paste the script code for the newsletter here, without the <script> tag. It should start with (function([rest of script here])); (make sure to include the semicolon at the end)
   */
  newsletter?: string | null
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-page".
 */
export interface BlogPage {
  id: string
  text: {
    [k: string]: unknown
  }[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  title?: string | null
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock".
 */
export interface TextBlock {
  text_block: {
    [k: string]: unknown
  }[]
  id?: string | null
  blockName?: string | null
  blockType: 'textBlock'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoColumnBlock".
 */
export interface TwoColumnBlock {
  invertOrder?: boolean | null
  columnText: {
    size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null
    title?: string | null
    subtitle: string
    content?:
      | {
          [k: string]: unknown
        }[]
      | null
    addLink?: boolean | null
    link?: {
      type?: ('reference' | 'custom' | 'mailto') | null
      newTab?: boolean | null
      reference?:
        | ({
            relationTo: 'homepage'
            value: string | Homepage
          } | null)
        | ({
            relationTo: 'artists-page'
            value: string | ArtistsPage
          } | null)
        | ({
            relationTo: 'art-society-page'
            value: string | ArtSocietyPage
          } | null)
        | ({
            relationTo: 'exhibitions-page'
            value: string | ExhibitionsPage
          } | null)
        | ({
            relationTo: 'gallery-page'
            value: string | GalleryPage
          } | null)
        | ({
            relationTo: 'members-only-page'
            value: string | MembersOnlyPage
          } | null)
        | ({
            relationTo: 'generic-pages'
            value: string | GenericPage
          } | null)
        | ({
            relationTo: 'newsletter-page'
            value: string | NewsletterPage
          } | null)
        | ({
            relationTo: 'blog-page'
            value: string | BlogPage
          } | null)
      url?: string | null
      email?: string | null
      subject?: string | null
      body?: string | null
      label: string
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'primary' | 'secondary') | null
    }
  }
  columnImage: {
    size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null
    /**
     * Optimal aspect-ratio: 1/1
     */
    image: Media
  }
  id?: string | null
  blockName?: string | null
  blockType: 'two-column-block'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToAction".
 */
export interface CallToAction {
  backgroundColor: 'white' | 'black' | 'blue'
  title: string
  text: {
    [k: string]: unknown
  }[]
  /**
   * Optimal aspect-ratio: 16/9
   */
  featuredImage: Media
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
  }
  id?: string | null
  blockName?: string | null
  blockType: 'cta'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock".
 */
export interface VideoBlock {
  videoType: 'vimeo' | 'youtube'
  /**
   * Enter the ID or full URL (e.g., vimeo.com/123456789 or 123456789)
   */
  videoId: string
  title?: string | null
  description?: string | null
  id?: string | null
  blockName?: string | null
  blockType: 'videoBlock'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogpost".
 */
export interface Blogpost {
  id: string
  title?: string | null
  summary?: string | null
  categories: ('artists' | 'behind_the_scenes' | 'art_market' | 'all')[]
  layout: (TextBlock | MediaBlock | CallToAction | VideoBlock)[]
  meta?: {
    title?: string | null
    description?: string | null
    keywords?: string | null
  }
  Banners?: {
    reachOutBoolean?: boolean | null
    newsletterBoolean?: boolean | null
    newsletterPopupBoolean?: boolean | null
  }
  slug?: string | null
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  invertBackground?: boolean | null
  position?: ('default' | 'fullscreen') | null
  media: Media
  id?: string | null
  blockName?: string | null
  blockType: 'mediaBlock'
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submission".
 */
export interface FormSubmission {
  id: string
  name: string
  email: string
  message: string
  source?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  firstName?: string | null
  lastName?: string | null
  roles?: ('admin' | 'user')[] | null
  updatedAt: string
  createdAt: string
  email: string
  resetPasswordToken?: string | null
  resetPasswordExpiration?: string | null
  salt?: string | null
  hash?: string | null
  loginAttempts?: number | null
  lockUntil?: string | null
  password?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string
  document?:
    | ({
        relationTo: 'homepage'
        value: string | Homepage
      } | null)
    | ({
        relationTo: 'exhibitions-page'
        value: string | ExhibitionsPage
      } | null)
    | ({
        relationTo: 'artists-page'
        value: string | ArtistsPage
      } | null)
    | ({
        relationTo: 'gallery-page'
        value: string | GalleryPage
      } | null)
    | ({
        relationTo: 'art-society-page'
        value: string | ArtSocietyPage
      } | null)
    | ({
        relationTo: 'members-only-page'
        value: string | MembersOnlyPage
      } | null)
    | ({
        relationTo: 'newsletter-page'
        value: string | NewsletterPage
      } | null)
    | ({
        relationTo: 'blog-page'
        value: string | BlogPage
      } | null)
    | ({
        relationTo: 'generic-pages'
        value: string | GenericPage
      } | null)
    | ({
        relationTo: 'artist'
        value: string | Artist
      } | null)
    | ({
        relationTo: 'artwork'
        value: string | Artwork
      } | null)
    | ({
        relationTo: 'blogpost'
        value: string | Blogpost
      } | null)
    | ({
        relationTo: 'exhibition'
        value: string | Exhibition
      } | null)
    | ({
        relationTo: 'testimonial'
        value: string | Testimonial
      } | null)
    | ({
        relationTo: 'media'
        value: Media
      } | null)
    | ({
        relationTo: 'form-submission'
        value: string | FormSubmission
      } | null)
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
  globalSlug?: string | null
  user: {
    relationTo: 'users'
    value: string | User
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
  featuredExhibitions?: T
  layout?:
    | T
    | {
        textBlock?: T | TextBlockSelect<T>
        'two-column-block'?: T | TwoColumnBlockSelect<T>
        cta?: T | CallToActionSelect<T>
        videoBlock?: T | VideoBlockSelect<T>
      }
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock_select".
 */
export interface TextBlockSelect<T extends boolean = true> {
  text_block?: T
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoColumnBlock_select".
 */
export interface TwoColumnBlockSelect<T extends boolean = true> {
  invertOrder?: T
  columnText?:
    | T
    | {
        size?: T
        title?: T
        subtitle?: T
        content?: T
        addLink?: T
        link?:
          | T
          | {
              type?: T
              newTab?: T
              reference?: T
              url?: T
              email?: T
              subject?: T
              body?: T
              label?: T
              appearance?: T
            }
      }
  columnImage?:
    | T
    | {
        size?: T
        image?: T
      }
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToAction_select".
 */
export interface CallToActionSelect<T extends boolean = true> {
  backgroundColor?: T
  title?: T
  text?: T
  featuredImage?: T
  link?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
      }
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock_select".
 */
export interface VideoBlockSelect<T extends boolean = true> {
  videoType?: T
  videoId?: T
  title?: T
  description?: T
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibitions-page_select".
 */
export interface ExhibitionsPageSelect<T extends boolean = true> {
  featuredExhibitions?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artists-page_select".
 */
export interface ArtistsPageSelect<T extends boolean = true> {
  text?: T
  featuredArtwork?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-page_select".
 */
export interface GalleryPageSelect<T extends boolean = true> {
  about_text?: T
  mission_statement?: T
  imageHero?: T
  alexander_bio?: T
  imageAlexander?: T
  felicitas_bio?: T
  imageFelicitas?: T
  main_text?: T
  textImageBlock?:
    | T
    | {
        imageVision?: T
        text_under_image?: T
      }
  text?: T
  link?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  backgroundImage?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "art-society-page_select".
 */
export interface ArtSocietyPageSelect<T extends boolean = true> {
  call_to_action_text?: T
  imageHero?: T
  help_text_?: T
  benefits?: T
  benefitsVideo?: T
  title_sentence?: T
  testimonialsItems?: T
  resetPasswordImage?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members-only-page_select".
 */
export interface MembersOnlyPageSelect<T extends boolean = true> {
  tab_title_home?: T
  page_title_home?: T
  text_home?: T
  homeBlocks?:
    | T
    | {
        'title-image-info-block'?: T | TitleImageInfoBlockSelect<T>
      }
  tab_title_virtual_exhibition?: T
  page_title_virtual_exhibition?: T
  virtualExhibition?: T
  tab_title_special_events?: T
  page_title_special_events?: T
  text_special_events?: T
  specialEventsImage?: T
  tab_title_art_advice?: T
  page_title_art_advice?: T
  individuallArtAdviceBlock?:
    | T
    | {
        'title-image-info-block'?: T | TitleImageInfoBlockSelect<T>
      }
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TitleImageInfoBlock_select".
 */
export interface TitleImageInfoBlockSelect<T extends boolean = true> {
  textJustification?: T
  title?: T
  info?: T
  addLink?: T
  link?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  image?: T
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-page_select".
 */
export interface NewsletterPageSelect<T extends boolean = true> {
  text?: T
  success_message?: T
  newsletter?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-page_select".
 */
export interface BlogPageSelect<T extends boolean = true> {
  text?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-pages_select".
 */
export interface GenericPagesSelect<T extends boolean = true> {
  text?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  title?: T
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artist_select".
 */
export interface ArtistSelect<T extends boolean = true> {
  full_name?: T
  country?: T
  additional_info?: T
  website?: T
  instagram?: T
  image?: T
  type?: T
  bio?: T
  artworkArchiveCode?: T
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  relation?:
    | T
    | {
        artworks?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artwork_select".
 */
export interface ArtworkSelect<T extends boolean = true> {
  title?: T
  description?: T
  image?: T
  relation?:
    | T
    | {
        artist?: T
      }
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogpost_select".
 */
export interface BlogpostSelect<T extends boolean = true> {
  title?: T
  summary?: T
  categories?: T
  layout?:
    | T
    | {
        textBlock?: T | TextBlockSelect<T>
        mediaBlock?: T | MediaBlockSelect<T>
        cta?: T | CallToActionSelect<T>
        videoBlock?: T | VideoBlockSelect<T>
      }
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  Banners?:
    | T
    | {
        reachOutBoolean?: T
        newsletterBoolean?: T
        newsletterPopupBoolean?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  invertBackground?: T
  position?: T
  media?: T
  id?: T
  blockName?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exhibition_select".
 */
export interface ExhibitionSelect<T extends boolean = true> {
  title?: T
  dateBegin?: T
  dateEnd?: T
  text?: T
  homepageImage?: T
  image?: T
  addLink?: T
  exhibitionLink?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  addOtherLink?: T
  extraLink?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  meta?:
    | T
    | {
        title?: T
        description?: T
        keywords?: T
      }
  relation?:
    | T
    | {
        artists?: T
      }
  slug?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonial_select".
 */
export interface TestimonialSelect<T extends boolean = true> {
  name?: T
  testimonial?: T
  picture?: T
  stars?: T
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  title?: T
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submission_select".
 */
export interface FormSubmissionSelect<T extends boolean = true> {
  name?: T
  email?: T
  message?: T
  source?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T
  lastName?: T
  roles?: T
  updatedAt?: T
  createdAt?: T
  email?: T
  resetPasswordToken?: T
  resetPasswordExpiration?: T
  salt?: T
  hash?: T
  loginAttempts?: T
  lockUntil?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T
  globalSlug?: T
  user?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T
  key?: T
  value?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T
  batch?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: string
  nav?:
    | {
        link: {
          type?: ('reference' | 'custom' | 'mailto') | null
          newTab?: boolean | null
          reference?:
            | ({
                relationTo: 'homepage'
                value: string | Homepage
              } | null)
            | ({
                relationTo: 'artists-page'
                value: string | ArtistsPage
              } | null)
            | ({
                relationTo: 'art-society-page'
                value: string | ArtSocietyPage
              } | null)
            | ({
                relationTo: 'exhibitions-page'
                value: string | ExhibitionsPage
              } | null)
            | ({
                relationTo: 'gallery-page'
                value: string | GalleryPage
              } | null)
            | ({
                relationTo: 'members-only-page'
                value: string | MembersOnlyPage
              } | null)
            | ({
                relationTo: 'generic-pages'
                value: string | GenericPage
              } | null)
            | ({
                relationTo: 'newsletter-page'
                value: string | NewsletterPage
              } | null)
            | ({
                relationTo: 'blog-page'
                value: string | BlogPage
              } | null)
          url?: string | null
          email?: string | null
          subject?: string | null
          body?: string | null
          label: string
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'primary' | 'secondary') | null
        }
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string
  call_to_action: {
    [k: string]: unknown
  }[]
  nav?:
    | {
        category: string
        navItem?:
          | {
              link: {
                type?: ('reference' | 'custom' | 'mailto') | null
                newTab?: boolean | null
                reference?:
                  | ({
                      relationTo: 'homepage'
                      value: string | Homepage
                    } | null)
                  | ({
                      relationTo: 'artists-page'
                      value: string | ArtistsPage
                    } | null)
                  | ({
                      relationTo: 'art-society-page'
                      value: string | ArtSocietyPage
                    } | null)
                  | ({
                      relationTo: 'exhibitions-page'
                      value: string | ExhibitionsPage
                    } | null)
                  | ({
                      relationTo: 'gallery-page'
                      value: string | GalleryPage
                    } | null)
                  | ({
                      relationTo: 'members-only-page'
                      value: string | MembersOnlyPage
                    } | null)
                  | ({
                      relationTo: 'generic-pages'
                      value: string | GenericPage
                    } | null)
                  | ({
                      relationTo: 'newsletter-page'
                      value: string | NewsletterPage
                    } | null)
                  | ({
                      relationTo: 'blog-page'
                      value: string | BlogPage
                    } | null)
                url?: string | null
                email?: string | null
                subject?: string | null
                body?: string | null
                label: string
                /**
                 * Choose how the link should be rendered.
                 */
                appearance?: ('default' | 'primary' | 'secondary') | null
              }
              id?: string | null
            }[]
          | null
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socials".
 */
export interface Social {
  id: string
  socials?:
    | {
        platform: string
        url: string
        id?: string | null
      }[]
    | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reach-out".
 */
export interface ReachOut {
  id: string
  title: string
  text: {
    [k: string]: unknown
  }[]
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-banner".
 */
export interface NewsletterBanner {
  id: string
  title: string
  link: {
    type?: ('reference' | 'custom' | 'mailto') | null
    newTab?: boolean | null
    reference?:
      | ({
          relationTo: 'homepage'
          value: string | Homepage
        } | null)
      | ({
          relationTo: 'artists-page'
          value: string | ArtistsPage
        } | null)
      | ({
          relationTo: 'art-society-page'
          value: string | ArtSocietyPage
        } | null)
      | ({
          relationTo: 'exhibitions-page'
          value: string | ExhibitionsPage
        } | null)
      | ({
          relationTo: 'gallery-page'
          value: string | GalleryPage
        } | null)
      | ({
          relationTo: 'members-only-page'
          value: string | MembersOnlyPage
        } | null)
      | ({
          relationTo: 'generic-pages'
          value: string | GenericPage
        } | null)
      | ({
          relationTo: 'newsletter-page'
          value: string | NewsletterPage
        } | null)
      | ({
          relationTo: 'blog-page'
          value: string | BlogPage
        } | null)
    url?: string | null
    email?: string | null
    subject?: string | null
    body?: string | null
    label: string
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'primary' | 'secondary') | null
  }
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-popup".
 */
export interface NewsletterPopup {
  id: string
  /**
   * Paste the script code for the newsletter embedded formhere, without the <script> tag. It should start with (function([rest of script here])); (make sure to include the semicolon at the end)
   */
  newsletter?: string | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu_select".
 */
export interface MenuSelect<T extends boolean = true> {
  nav?:
    | T
    | {
        link?:
          | T
          | {
              type?: T
              newTab?: T
              reference?: T
              url?: T
              email?: T
              subject?: T
              body?: T
              label?: T
              appearance?: T
            }
        id?: T
      }
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  call_to_action?: T
  nav?:
    | T
    | {
        category?: T
        navItem?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T
                    newTab?: T
                    reference?: T
                    url?: T
                    email?: T
                    subject?: T
                    body?: T
                    label?: T
                    appearance?: T
                  }
              id?: T
            }
        id?: T
      }
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socials_select".
 */
export interface SocialsSelect<T extends boolean = true> {
  socials?:
    | T
    | {
        platform?: T
        url?: T
        id?: T
      }
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reach-out_select".
 */
export interface ReachOutSelect<T extends boolean = true> {
  title?: T
  text?: T
  link?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-banner_select".
 */
export interface NewsletterBannerSelect<T extends boolean = true> {
  title?: T
  link?:
    | T
    | {
        type?: T
        newTab?: T
        reference?: T
        url?: T
        email?: T
        subject?: T
        body?: T
        label?: T
        appearance?: T
      }
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-popup_select".
 */
export interface NewsletterPopupSelect<T extends boolean = true> {
  newsletter?: T
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown
}
